[
    {
        "id": 0,
        "filename": "3.txt",
        "prefix": "def visuali",
        "middle": "ze_classes(data):\n\n    class_counts = count_classes(d",
        "suffix": "ata)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 1,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_counts = cou",
        "middle": "nt_cla",
        "suffix": "sses(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 2,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n ",
        "middle": "   class_counts = count_cla",
        "suffix": "sses(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 3,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_counts = count",
        "middle": "_clas",
        "suffix": "ses(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 4,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_counts",
        "middle": " = co",
        "suffix": "unt_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 5,
        "filename": "3.txt",
        "prefix": "def visualize_classes",
        "middle": "(data):\n\n    class_counts = count_classes(da",
        "suffix": "ta)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 6,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_co",
        "middle": "unt",
        "suffix": "s = count_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 7,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_counts = count_classes(data)\n\n  ",
        "middle": " ",
        "suffix": " plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 8,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):",
        "middle": "\n\n    class_counts = count_classes(data)\n\n  ",
        "suffix": "  plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 9,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_counts = count_",
        "middle": "classe",
        "suffix": "s(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 10,
        "filename": "3.txt",
        "prefix": "def visualize_classes",
        "middle": "(da",
        "suffix": "ta):\n\n    class_counts = count_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 11,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n",
        "middle": "\n    class_counts = count_class",
        "suffix": "es(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 12,
        "filename": "3.txt",
        "prefix": "def vis",
        "middle": "ualize_cla",
        "suffix": "sses(data):\n\n    class_counts = count_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 13,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_counts = ",
        "middle": "cou",
        "suffix": "nt_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 14,
        "filename": "3.txt",
        "prefix": "def visualiz",
        "middle": "e_classes(data):\n\n",
        "suffix": "    class_counts = count_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 15,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_counts = count_classes(d",
        "middle": "a",
        "suffix": "ta)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 16,
        "filename": "3.txt",
        "prefix": "def ",
        "middle": "visualize_cl",
        "suffix": "asses(data):\n\n    class_counts = count_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 17,
        "filename": "3.txt",
        "prefix": "d",
        "middle": "ef visual",
        "suffix": "ize_classes(data):\n\n    class_counts = count_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 18,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n ",
        "middle": "   cla",
        "suffix": "ss_counts = count_classes(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    },
    {
        "id": 19,
        "filename": "3.txt",
        "prefix": "def visualize_classes(data):\n\n    class_counts = count_classes(data)\n\n ",
        "middle": " ",
        "suffix": "  plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_classes_v2(data):\n\n    class_counts = count_classes_v2(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.bar(class_counts.keys(), class_counts.values(), color='skyblue')\n    plt.xlabel('Classes')\n    plt.ylabel('Number of samples')\n    plt.xticks(rotation=45)\n    plt.show()\n\ndef visualize_sample_images(data):\n    plt.figure(figsize=(24, 12))\n    for images, labels in data.take(1):\n        for i in range(32):\n            plt.subplot(4, 8, i + 1)\n            plt.imshow(np.array(images[i]).astype(\"uint8\"))\n            plt.title(class_names[labels[i]])\n            plt.axis(\"off\")\n\ndef count_classes(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for images, labels in data:\n        for label in labels:\n            class_name = class_names[label]\n            class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_v2(data):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for image, label in data:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts\n\ndef count_classes_in_predicted_labels(y_pred):\n    class_counts = {class_name: 0 for class_name in class_names}\n    for label in y_pred:\n        class_name = class_names[label]\n        class_counts[class_name] += 1\n\n    return class_counts"
    }
]